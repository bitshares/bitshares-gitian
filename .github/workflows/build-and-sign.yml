on: deployment
env:
  USE_DOCKER: 1
jobs:
  prepare-bionic:
    name: Prepare "bionic" Gitian build environment
    runs-on: ubuntu-latest
    steps:
    - name: Load Prep Cache
      id: cache-bionic
      uses: actions/cache@v1
      with:
        path: docker
        key: prep-cache-bionic
    - uses: actions/checkout@v1
      if: steps.cache-bionic.outputs.cache-hit != 'true'
      with:
        submodules: recursive
    - name: Prepare
      if: steps.cache-bionic.outputs.cache-hit != 'true'
      run: |
        mkdir -p docker
        echo "Argh - caching only works for push and pull events. See https://github.com/actions/cache/issues/63"
        vendor/gitian-builder/bin/make-base-vm --docker --suite bionic
        docker save base-bionic-amd64 | xz >docker/base-bionic-amd64.tar.xz
    - name: Upload build artifacts
      if: steps.cache-bionic.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@master
      with:
        name: docker-bionic
        path: docker/base-bionic-amd64.tar.xz
  prepare-xenial:
    name: Prepare "xenial" Gitian build environment
    runs-on: ubuntu-latest
    steps:
    - name: Load Prep Cache
      id: cache-xenial
      uses: actions/cache@v1
      with:
        path: docker
        key: prep-cache-xenial
    - uses: actions/checkout@v1
      if: steps.cache-xenial.outputs.cache-hit != 'true'
      with:
        submodules: recursive
    - name: Prepare
      if: steps.cache-xenial.outputs.cache-hit != 'true'
      run: |
        mkdir -p docker
        echo "Argh - caching only works for push and pull events. See https://github.com/actions/cache/issues/63"
        vendor/gitian-builder/bin/make-base-vm --docker --suite xenial
        docker save base-xenial-amd64 | xz >docker/base-xenial-amd64.tar.xz
    - name: Upload build artifacts
      if: steps.cache-xenial.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@master
      with:
        name: docker-xenial
        path: docker/base-xenial-amd64.tar.xz
  prepare-mac:
    name: Scrape mac-SDK
    runs-on: macos-latest
    steps:
    - name: Load Prep Cache
      id: cache-osx
      uses: actions/cache@v1
      with:
        path: osx
        key: prep-cache-osx
    - uses: actions/checkout@v1
      if: steps.cache-osx.outputs.cache-hit != 'true'
      with:
        repository: tpoechtrager/osxcross
        ref: e0a171828a72a0d7ad4409489033536590008ebf
    - name: Package
      if: steps.cache-osx.outputs.cache-hit != 'true'
      run: |
        echo "Argh - caching only works for push and pull events. See https://github.com/actions/cache/issues/63"
        pushd ../osxcross
        tools/gen_sdk_package.sh
        popd
        mkdir -p osx
        mv ../osxcross/*MacOSX* osx
    - name: Upload SDK
      if: steps.cache-osx.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@master
      with:
        name: MacOS-SDK
        path: osx/MacOSX10.15.sdk.tar.xz
  linux:
    name: Build and sign linux binaries
    needs: prepare-xenial
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Load Prep Cache
      id: cache-xenial
      uses: actions/cache@v1
      with:
        path: docker
        key: prep-cache-xenial
    - name: Poor man's cache
      if: steps.cache-xenial.outputs.cache-hit != 'true'
      uses: actions/download-artifact@master
      with:
        name: docker-xenial
        path: docker/
    - name: Load Build Cache
      uses: actions/cache@v1
      with:
        path: vendor/gitian-builder/cache/bitshares-core-linux
        key: build-cache-linux-${{ github.event.deployment.payload.coreversion }}
        restore-keys: |
          build-cache-linux-
    - name: Prepare
      run: |
        docker load -i docker/base-xenial-amd64.tar.xz
    - name: Build and Sign
      run: |
        sudo apt-get update
        sudo apt-get install ruby
        export GNUPGHOME=`pwd`/.gpghome
        ./run-gitian -b -O linux \
                     ${{ github.event.deployment.payload.coreversion }} \
                     -j 1 \
          || ( echo Install log: && cat vendor/gitian-builder/var/install.log \
               && echo Build log: && cat vendor/gitian-builder/var/build.log \
               && false )
        PGP_PASS="${{ secrets.PGP_PASSPHRASE }}" \
          ./run-gitian -s BitShares-Gitian-Auto-Build-Signer \
                       -O linux -p `pwd`/.github/gpg-wrapper \
                       ${{ github.event.deployment.payload.coreversion }}
    - name: Push Signatures
      run: |
        git config --add user.name "BitShares Github Autobuild"
        git config --add user.email "bga@noreply"
        BRANCH="autobuild-signatures-linux-$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        git checkout -b "$BRANCH"
        git add signatures
        git commit -m "Add Linux autobuild signature for ${{ github.event.deployment.payload.coreversion }}"
        git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "$BRANCH"
    - name: Upload build artifacts
      uses: actions/upload-artifact@master
      with:
        name: Linux-Binaries
        path: vendor/gitian-builder/build/out
  mac:
    name: Build and sign mac binaries
    needs:
    - prepare-bionic
    - prepare-mac
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Load Docker Prep Cache
      id: cache-bionic
      uses: actions/cache@v1
      with:
        path: docker
        key: prep-cache-bionic
    - name: Poor man's docker cache
      if: steps.cache-bionic.outputs.cache-hit != 'true'
      uses: actions/download-artifact@master
      with:
        name: docker-bionic
        path: docker/
    - name: Load OSX Prep Cache
      id: cache-osx
      uses: actions/cache@v1
      with:
        path: osx
        key: prep-cache-osx
    - name: Poor man's OSX cache
      if: steps.cache-osx.outputs.cache-hit != 'true'
      uses: actions/download-artifact@master
      with:
        name: MacOS-SDK
        path: osx/
    - name: Load Build Cache
      uses: actions/cache@v1
      with:
        path: vendor/gitian-builder/cache/bitshares-core-osx
        key: build-cache-osx-${{ github.event.deployment.payload.coreversion }}
        restore-keys: |
          build-cache-osx-
    - name: Prepare
      run: |
        docker load -i docker/base-bionic-amd64.tar.xz
    - name: Build and Sign
      run: |
        sudo apt-get update
        sudo apt-get install ruby
        mkdir -p vendor/gitian-builder/inputs
        mv osx/* vendor/gitian-builder/inputs
        ./run-gitian -b -O osx \
                     ${{ github.event.deployment.payload.coreversion }} \
                     -j 1 \
          || ( echo Install log: && cat vendor/gitian-builder/var/install.log \
               && echo Build log: && cat vendor/gitian-builder/var/build.log \
               && false )
        export GNUPGHOME=`pwd`/.gpghome
        PGP_PASS="${{ secrets.PGP_PASSPHRASE }}" \
          ./run-gitian -s BitShares-Gitian-Auto-Build-Signer \
                       -O osx -p `pwd`/.github/gpg-wrapper \
                       ${{ github.event.deployment.payload.coreversion }}
    - name: Push Signatures
      run: |
        git config --add user.name "BitShares Github Autobuild"
        git config --add user.email "bga@noreply"
        BRANCH="autobuild-signatures-osx-$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        git checkout -b "$BRANCH"
        git add signatures
        git commit -m "Add OSX autobuild signature for ${{ github.event.deployment.payload.coreversion }}"
        git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "$BRANCH"
    - name: Upload build artifacts
      uses: actions/upload-artifact@master
      with:
        name: Mac Binaries
        path: vendor/gitian-builder/build/out
  windows:
    name: Build and sign windows binaries
    needs: prepare-bionic
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Load Docker Prep Cache
      id: cache-bionic
      uses: actions/cache@v1
      with:
        path: docker
        key: prep-cache-bionic
    - name: Poor man's cache
      if: steps.cache-bionic.outputs.cache-hit != 'true'
      uses: actions/download-artifact@master
      with:
        name: docker-bionic
        path: docker/
    - name: Load Build Cache
      uses: actions/cache@v1
      with:
        path: vendor/gitian-builder/cache/bitshares-core-win
        key: build-cache-win-${{ github.event.deployment.payload.coreversion }}
        restore-keys: |
          build-cache-win-
    - name: Prepare
      run: |
        docker load -i docker/base-bionic-amd64.tar.xz
    - name: Build and Sign
      run: |
        sudo apt-get update
        sudo apt-get install ruby
        ./run-gitian -b -O win \
                     ${{ github.event.deployment.payload.coreversion }} \
                     -j 1 \
          || ( echo Install log: && cat vendor/gitian-builder/var/install.log \
               && echo Build log: && cat vendor/gitian-builder/var/build.log \
               && false )
        export GNUPGHOME=`pwd`/.gpghome
        PGP_PASS="${{ secrets.PGP_PASSPHRASE }}" \
          ./run-gitian -s BitShares-Gitian-Auto-Build-Signer \
                       -O win -p `pwd`/.github/gpg-wrapper \
                       ${{ github.event.deployment.payload.coreversion }}
    - name: Push Signatures
      run: |
        git config --add user.name "BitShares Github Autobuild"
        git config --add user.email "bga@noreply"
        BRANCH="autobuild-signatures-win-$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        git checkout -b "$BRANCH"
        git add signatures
        git commit -m "Add win autobuild signature for ${{ github.event.deployment.payload.coreversion }}"
        git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "$BRANCH"
    - name: Upload build artifacts
      uses: actions/upload-artifact@master
      with:
        name: Windows Binaries
        path: vendor/gitian-builder/build/out
